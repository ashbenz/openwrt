/dts-v1/;

#include "mt7621.dtsi"

#include <dt-bindings/gpio/gpio.h>
#include <dt-bindings/input/input.h>

/ {
	compatible = "xiaomi,mir3p", "mediatek,mt7621-soc";
	model = "Xiaomi Mi Router 3 PRO";

	memory@0 {
		device_type = "memory";
		reg = <0x0 0x1c000000>;
	};

  	memory@1 {
		device_type = "memory";
		reg = <0x20000000 0x4000000>;
	};

	chosen {
		bootargs = "console=ttyS0,115200n8";
	};

	gpio-leds {
		compatible = "gpio-leds";

		status_red {
			label = "mir3p:red:status";
			gpios = <&gpio0 6 GPIO_ACTIVE_LOW>;
		};

		status_blue {
			label = "mir3p:blue:status";
			gpios = <&gpio0 8 GPIO_ACTIVE_LOW>;
		};

		status_yellow {
			label = "mir3p:yellow:status";
			gpios = <&gpio0 10 GPIO_ACTIVE_LOW>;
		};

		wan_amber {
			label = "mir3p:amber:wan";
			gpios = <&gpio0 13 GPIO_ACTIVE_LOW>;
		};

		lan1_amber {
			label = "mir3p:amber:lan1";
			gpios = <&gpio0 14 GPIO_ACTIVE_LOW>;
		};

		lan2_amber {
			label = "mir3p:amber:lan2";
			gpios = <&gpio0 16 GPIO_ACTIVE_LOW>;
		};

	};

	gpio-keys-polled {
		compatible = "gpio-keys-polled";
		#address-cells = <1>;
		#size-cells = <0>;
		poll-interval = <20>;

		reset {
			label = "reset";
			gpios = <&gpio0 18 GPIO_ACTIVE_LOW>;
			linux,code = <KEY_RESTART>;
		};
	};

	gpio_export {
		compatible = "gpio-export";
		#size-cells = <0>;

		usbpower {
			gpio-export,name = "usbpower";
			gpio-export,output = <1>;
			gpios = <&gpio0 12 GPIO_ACTIVE_HIGH>;
		};
	};
};

&nand {
	status = "okay";

	partition@0 {
		label = "Bootloader";
		reg = <0x0 0x40000>;
		read-only;
	};

	partition@40000 {
		label = "Config";
		reg = <0x40000 0x40000>;
	};

	partition@80000 {
		label = "Bdata";
		reg = <0x80000 0x40000>;
		read-only;
	};

	factory: partition@c0000 {
		label = "Factory";
		reg = <0xc0000 0x40000>;
		read-only;
	};

	partition@100000 {
		label = "crash";
		reg = <0x100000 0x40000>;
	};

	partition@140000 {
		label = "crash_syslog";
		reg = <0x140000 0x80000>;
	};

	partition@1c0000 {
		label = "reserved0";
		reg = <0x1c0000 0x40000>;
		read-only;
	};

	/* uboot expects to find kernels at 0x200000 & 0x600000
	 * referred to as system 1 & system 2 respectively.
	 * a kernel is considered suitable for handing control over
	 * if its linux magic number exists & uImage CRC are correct.
	 * If either of those conditions fail, a matching sys'n'_fail flag
	 * is set in uboot env & a restart performed in the hope that the
	 * alternate kernel is okay.
	 * if neither kernel checksums ok and both are marked failed, system 2
	 * is booted anyway.
	 *
	 * Note uboot's tftp flash install writes the transferred
	 * image to both kernel partitions.
	 */

	partition@200000 {
		label = "kernel_stock";
		reg = <0x200000 0x400000>;
	};

	partition@600000 {
		label = "kernel";
		reg = <0x600000 0x400000>;
	};

	/* ubi partition is the result of squashing
	 * next consecutive stock partitions:
	 * - rootfs0 (rootfs partition for stock kernel0),
	 * - rootfs1 (rootfs partition for stock failsafe kernel1),
	 * - overlay (used as ubi overlay in stock fw)
	 * resulting 117,5MiB space for packages.
	 */

	partition@a00000 {
		label = "ubi";
		reg = <0xa00000 0xf580000>;
	};
};

&pcie {
	status = "okay";

	pcie0 {
		mt76@0,0 {
			device_type = "pci";
			reg = <0x0000 0 0 0 0>;
			mediatek,mtd-eeprom = <&factory 0x0000>;
			ieee80211-freq-limit = <2400000 2500000>;
		};
	};

	pcie1 {
		mt76@0,1 {
			device_type = "pci";
			reg = <0x0000 0 0 0 0>;
			mediatek,mtd-eeprom = <&factory 0x8000>;
			ieee80211-freq-limit = <5000000 6000000>;
		};
	};
};

&ethernet {
	mtd-mac-address = <&factory 0xe000>;
	mediatek,portmap = "llllw";
};

&pinctrl {
	state_default: pinctrl0 {
		gpio {
			ralink,group = "jtag", "uart2", "uart3", "wdt";
			ralink,function = "gpio";
		};
	};
};
